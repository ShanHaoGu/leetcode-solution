# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def nodesBetweenCriticalPoints(self, head: Optional[ListNode]) -> List[int]:
        count = 0
        cur = head
        check = []
        while cur.next.next:
            if cur.next.val > cur.val and cur.next.val > cur.next.next.val:
                check.append(count)
            if cur.next.val < cur.val and cur.next.val < cur.next.next.val:
                check.append(count)
            count += 1
            cur = cur.next
        if len(check) <= 1:
            return [-1, -1]
        mini = check[1] - check[0]
        for i in range(len(check) - 1):
            mini = min(mini, check[i + 1] - check[i])
        return [mini, check[-1] - check[0]]
